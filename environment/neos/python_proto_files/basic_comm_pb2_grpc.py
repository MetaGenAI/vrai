# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import basic_comm_pb2 as basic__comm__pb2


class DataCommStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetObs = channel.unary_unary(
                '/DataComm/GetObs',
                request_serializer=basic__comm__pb2.Empty.SerializeToString,
                response_deserializer=basic__comm__pb2.NeosObservation.FromString,
                )
        self.GetTextureObs = channel.unary_unary(
                '/DataComm/GetTextureObs',
                request_serializer=basic__comm__pb2.Empty.SerializeToString,
                response_deserializer=basic__comm__pb2.TextureObservation.FromString,
                )
        self.SendAct = channel.unary_unary(
                '/DataComm/SendAct',
                request_serializer=basic__comm__pb2.NeosAction.SerializeToString,
                response_deserializer=basic__comm__pb2.Response.FromString,
                )
        self.ResetAgent = channel.unary_unary(
                '/DataComm/ResetAgent',
                request_serializer=basic__comm__pb2.Empty.SerializeToString,
                response_deserializer=basic__comm__pb2.Response.FromString,
                )
        self.EstablishConnection = channel.unary_unary(
                '/DataComm/EstablishConnection',
                request_serializer=basic__comm__pb2.ConnectionParams.SerializeToString,
                response_deserializer=basic__comm__pb2.ConnectionConfig.FromString,
                )
        self.StopConnection = channel.unary_unary(
                '/DataComm/StopConnection',
                request_serializer=basic__comm__pb2.Empty.SerializeToString,
                response_deserializer=basic__comm__pb2.Response.FromString,
                )
        self.GatherAct = channel.unary_unary(
                '/DataComm/GatherAct',
                request_serializer=basic__comm__pb2.Empty.SerializeToString,
                response_deserializer=basic__comm__pb2.NeosAction.FromString,
                )


class DataCommServicer(object):
    """Missing associated documentation comment in .proto file"""

    def GetObs(self, request, context):
        """(Method definitions not shown)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTextureObs(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAct(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetAgent(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EstablishConnection(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopConnection(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GatherAct(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataCommServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetObs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetObs,
                    request_deserializer=basic__comm__pb2.Empty.FromString,
                    response_serializer=basic__comm__pb2.NeosObservation.SerializeToString,
            ),
            'GetTextureObs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTextureObs,
                    request_deserializer=basic__comm__pb2.Empty.FromString,
                    response_serializer=basic__comm__pb2.TextureObservation.SerializeToString,
            ),
            'SendAct': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAct,
                    request_deserializer=basic__comm__pb2.NeosAction.FromString,
                    response_serializer=basic__comm__pb2.Response.SerializeToString,
            ),
            'ResetAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetAgent,
                    request_deserializer=basic__comm__pb2.Empty.FromString,
                    response_serializer=basic__comm__pb2.Response.SerializeToString,
            ),
            'EstablishConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.EstablishConnection,
                    request_deserializer=basic__comm__pb2.ConnectionParams.FromString,
                    response_serializer=basic__comm__pb2.ConnectionConfig.SerializeToString,
            ),
            'StopConnection': grpc.unary_unary_rpc_method_handler(
                    servicer.StopConnection,
                    request_deserializer=basic__comm__pb2.Empty.FromString,
                    response_serializer=basic__comm__pb2.Response.SerializeToString,
            ),
            'GatherAct': grpc.unary_unary_rpc_method_handler(
                    servicer.GatherAct,
                    request_deserializer=basic__comm__pb2.Empty.FromString,
                    response_serializer=basic__comm__pb2.NeosAction.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DataComm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataComm(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def GetObs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataComm/GetObs',
            basic__comm__pb2.Empty.SerializeToString,
            basic__comm__pb2.NeosObservation.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTextureObs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataComm/GetTextureObs',
            basic__comm__pb2.Empty.SerializeToString,
            basic__comm__pb2.TextureObservation.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendAct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataComm/SendAct',
            basic__comm__pb2.NeosAction.SerializeToString,
            basic__comm__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataComm/ResetAgent',
            basic__comm__pb2.Empty.SerializeToString,
            basic__comm__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EstablishConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataComm/EstablishConnection',
            basic__comm__pb2.ConnectionParams.SerializeToString,
            basic__comm__pb2.ConnectionConfig.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataComm/StopConnection',
            basic__comm__pb2.Empty.SerializeToString,
            basic__comm__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GatherAct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/DataComm/GatherAct',
            basic__comm__pb2.Empty.SerializeToString,
            basic__comm__pb2.NeosAction.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
